r"""Tests quadratic with drift
Equation:
$$
dY_t =-2t\, dt Z_t\, dW_t, \quad Y_T = W^2_T, \\
$$
Where $W_t$ is the standard brownian motion.

"""

from mean_field_tools.deep_bsde.forward_backward_sde import Filtration, BackwardSDE
import torch


def test_terminal_quadratic_with_deterministic_drift():
    """
    Tests BSDE solver for the equation
    """
    TIME_DOMAIN = torch.linspace(0, 1, 101)
    NUMBER_OF_PATHS = 100
    SPATIAL_DIMENSIONS = 1

    def TERMINAL_CONDITION(filtration: Filtration):
        B_T = filtration.brownian_process[:, -1, :]
        return B_T**2

    def DRIFT(filtration: Filtration):
        t = filtration.time_process
        return 2 * t

    def ANALYTICAL_SOLUTION(x, t, T):
        return x**2 + (T - t) + (T**2 - t**2)

    filtration = Filtration(SPATIAL_DIMENSIONS, TIME_DOMAIN, NUMBER_OF_PATHS, seed=0)

    bsde = BackwardSDE(
        terminal_condition_function=TERMINAL_CONDITION,
        drift=DRIFT,
        filtration=filtration,
    )

    bsde.initialize_approximator()

    bsde.solve(
        approximator_args={
            "training_strategy_args": {
                "batch_size": 100,
                "number_of_iterations": 500,
                "number_of_batches": 5,
            },
        }
    )

    forward_path = bsde.filtration.get_paths()[:1, :, :]

    output = bsde.y_approximator(forward_path).tolist()
    forward_path = bsde.filtration.get_paths()[:1, :, :]

    output = bsde.y_approximator(forward_path).tolist()

    benchmark = [
        [
            [2.11445951461792],
            [2.1212193965911865],
            [2.1558523178100586],
            [2.1559736728668213],
            [2.169344186782837],
            [2.104651689529419],
            [2.059636354446411],
            [2.0576961040496826],
            [2.18001389503479],
            [2.1387813091278076],
            [2.239276647567749],
            [2.1895172595977783],
            [2.145482063293457],
            [2.1194024085998535],
            [2.008085250854492],
            [1.9318513870239258],
            [1.9270808696746826],
            [1.9943841695785522],
            [2.133498191833496],
            [2.0593526363372803],
            [1.9717739820480347],
            [1.9094758033752441],
            [2.0257365703582764],
            [2.0442774295806885],
            [1.8614665269851685],
            [1.796332836151123],
            [1.815106987953186],
            [1.8094964027404785],
            [1.7788547277450562],
            [1.6865172386169434],
            [1.6328916549682617],
            [1.619087815284729],
            [1.5958002805709839],
            [1.5832605361938477],
            [1.5640450716018677],
            [1.5553860664367676],
            [1.530577301979065],
            [1.5044151544570923],
            [1.4840006828308105],
            [1.4633201360702515],
            [1.4480277299880981],
            [1.4270179271697998],
            [1.4236383438110352],
            [1.3961565494537354],
            [1.3773465156555176],
            [1.372753381729126],
            [1.4927968978881836],
            [1.3691082000732422],
            [1.2908000946044922],
            [1.261755347251892],
            [1.2535631656646729],
            [1.269465446472168],
            [1.2569501399993896],
            [1.2248045206069946],
            [1.1875015497207642],
            [1.18912935256958],
            [1.1502125263214111],
            [1.1129117012023926],
            [1.1195831298828125],
            [1.1924855709075928],
            [1.574888825416565],
            [1.336330533027649],
            [1.1810863018035889],
            [1.3660682439804077],
            [1.2718647718429565],
            [1.1832151412963867],
            [1.2696670293807983],
            [1.4053881168365479],
            [1.6042183637619019],
            [1.3284645080566406],
            [1.7746922969818115],
            [1.6509175300598145],
            [1.6953316926956177],
            [1.3596293926239014],
            [1.245302438735962],
            [1.1488630771636963],
            [1.0558286905288696],
            [0.9056646227836609],
            [1.0131348371505737],
            [0.970384418964386],
            [1.0557740926742554],
            [1.017171859741211],
            [1.0961692333221436],
            [0.9456199407577515],
            [0.9205939769744873],
            [1.0199315547943115],
            [0.9330233931541443],
            [1.0740317106246948],
            [1.11129629611969],
            [1.0407732725143433],
            [1.485500693321228],
            [1.0630438327789307],
            [1.0269575119018555],
            [0.824196457862854],
            [0.6622006297111511],
            [0.6411368250846863],
            [0.7137596011161804],
            [0.9628263115882874],
            [0.7041453719139099],
            [0.7314968109130859],
            [0.7911450862884521],
        ]
    ]

    assert benchmark == output
